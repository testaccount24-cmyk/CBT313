        /* --------------------  rexx procedure  -------------------- *
         * Name:      lstproc or j2proc (slmj2prc)                    *
         *                                                            *
         * Function:  Display active JES2 proclib's                   *
         *                                                            *
         * Syntax:    %lstproc proc option                            *
         *                                                            *
         *         or x = slmj2prc('jes2 x')                          *
         *                                                            *
         *            Where:                                          *
         *            proc is the name of the JES2 proc or            *
         *            blank to default to JES2.                       *
         *                                                            *
         *            if option is nonblank then the JES2 procs       *
         *            will be returned to the caller in the format    *
         *            ddname1/dsn1/dsn2/... ddname2/dsn1/dsn2/...     *
         *                                                            *
         * Assumptions and Caveats:                                   *
         *            1. if proc not specified then use JES2          *
         *            2. only //PROCxx will be looked at              *
         *            3. comments will be ignored                     *
         *            4. symbolics are supported (mostly)             *
         *            5. system symbolics are supported               *
         *            6. only cataloged datasets are supported        *
         *            7. JES2 Dynalloc procs are not supported        *
         *            8. nested symbolics may not work                *
         *            9. if the mstrjcl or jes2 proc changes that     *
         *               is what you will see reflected               *
         *           10. This does NOT report the actual proc usage   *
         *               but what is found from mstrjcl and the       *
         *               jes2 proc.                                   *
         *           11. *IMPORTANT* It is assumed you have RACF      *
         *               read for the LISTDATA IDCAMS command.        *
         *               If not find *LISTDATA* and make the          *
         *               noted changes.  You will then be limited     *
         *               to the cataloged iplparm dataset.            *
         *                                                            *
         * Author:    Lionel B. Dyck                                  *
         *            Kaiser Permanente Information Technology        *
         *            Walnut Creek, CA 94598                          *
         *            (925) 926-5332                                  *
         *            Internet: lionel.b.dyck@kp.org                  *
         *                                                            *
         * History:                                                   *
         *            09/25/06 - Add numeric digits 10 for decimal@OS3*
         *                       arithmetic to eliminate overflow     *
         *                       during storage address calculations. *
         *            08/30/06 - Call fix_sym for MSTJCLxx proclib    *
         *                       dsn's                            @OS2*
         *            05/11/06 - fix search for mstjclxx proclibs @OSS*
         *            11/26/02 - fix for multiple procmst on return   *
         *            11/25/02 - add return option for called usage   *
         *            08/19/02 - correct to work with OS/390 below    *
         *                       2.10 (broke on 8/18 change)          *
         *            08/18/02 - pass ONLY #PROC to ISRDDN            *
         *                       and bypass former ispf msg           *
         *            08/15/01 - support INCLUDE in the Proc          *
         *            04/25/01 - fix from Iam Ramage to correctly     *
         *                       find the parmlib volser.             *
         *                       ian.ramage@rs-components.com         *
         *            02/21/01 - fix if proc symbol has quotes        *
         *            10/24/00 - update to get iplparm vol dyn        *
         *                       thx to Philippe Richard of IBM       *
         *            10/23/00 - update to get iplparm dsn dyn        *
         *                       thx to Philippe Richard of IBM       *
         *            06/20/00 - general release                      *
         *                     - Change dd's to #PROCMST & #PROCnn    *
         *            06/15/00 - minor clean up                       *
         *            06/14/00 - various changes                      *
         *                     - add code to dynamically find mstjclxx*
         *                       from Todd Burrell (zpn6@cdc.gov)     *
         *            06/13/00 - creation                             *
         *                                                            *
         * ---------------------------------------------------------- */

        arg j2proc j2opt
        numeric digits 10                               /* @OS3 */

        /* ----------------------------------------------------- *
         * Setup defaults                                        *
         * ----------------------------------------------------- */
        parse value "" with null ddn test mstrjcl proclibs,
                            proc syms procs parmlibs return
        ddn = "JCL"random(9999)

        /* ----------------------------------------------------- *
         * test options and use for procname or use JES2         *
         * ----------------------------------------------------- */
        if j2proc = null then jes2 = "JES2"
                         else jes2 = j2proc

        /* ----------------------------------------------------- *
         * Code from Todd Burrell to get mstjcl info             *
         * Enhanced by Ian Ramage                                *
         * ----------------------------------------------------- */
        CVT=STORAGE('10',4)
        CVTECVT=STORAGE(D2X(C2D(CVT)+140),4)
        /* GET THE IPL LOADPARMS */
        LOADPARM=STORAGE(D2X(C2D(CVTECVT)+168),8)
        /* address of IHAIPA control block */
        CVTIPA=STORAGE(D2X(C2D(CVTECVT)+392),4)
        /* mstjcl section in IPA */
        MJC=STORAGE(D2X(C2D(CVTIPA)+2448),4)
        /* mstjcl section in IPA length */
        MJCLEN=C2D(STORAGE(D2X(C2D(CVTIPA)+2452),2))
        /* ieasys source in mstjclxx */
        MJCSYS=STORAGE(D2X(C2D(CVTIPA)+2454),2)
        /* mstjcl xx value */
        MJCXX=STORAGE(D2X(C2D(MJC)+0),MJCLEN)
        if left(mjcxx,1) = "(" then
            parse value mjcxx with "(" mjcxx ")" .

         /* address of IHAIPA control block */
         IPLPARM  = Strip(LOADPARM)
         LOADADR  = Substr(IPLPARM,1,4)

        /* mstjcl section in IPA */
        ipalpar  = storage(d2x(c2d(cvtipa)+32), 8)
        ipalpdsn = storage(d2x(c2d(cvtipa)+48),44)
        parmaddr = storage(d2x(c2d(cvtipa)+92), 4)
        LOADVOL  = chk_volser(parmaddr)
        lparm = "'"strip(IPALPDSN)"(load"substr(loadparm,5,2)")'"

        /* ----------------------------------------------------- *
         * Read loadparm member to find parmlibs                 *
         * ----------------------------------------------------- */
         if loadvol <> null then
            "Alloc f("ddn") ds("lparm") shr reuse volume("LOADVOL")",
               "unit(sysallda)"
         else
            "Alloc f("ddn") ds("lparm") shr reuse"
         "Execio * diskr" ddn "(finis stem in."
         "Free  f("ddn")"
         LPAR = true
         do i = 1 to in.0
            if word(in.i,1) = "LPARNAME" then
               if word(in.i,2) = ipalpar then LPAR = true
                                         else LPAR = false
            if word(in.i,1) = "PARMLIB" & LPAR = true then
               parmlibs = parmlibs word(in.i,2)
            end
        if parmlibs = "" then parmlibs = "SYS1.PARMLIB"
        if wordpos('SYS1.PARMLIB',parmlibs) = 0 then
           parmlibs = parmlibs||" SYS1.PARMLIB"          /* @OSS */

        /* ----------------------------------------------------- *
         * Find PARMLIB with MSTJCLxx                            *
         * ----------------------------------------------------- */
         do i = 1 to words(parmlibs)
            mstrjcl = "'"strip(word(parmlibs,i))"(MSTJCL"mjcxx")'"
            if "OK" = sysdsn(mstrjcl) then leave
            end

        /* ----------------------------------------------------- *
         * Alloc and read master jcl parmlib member              *
         * ----------------------------------------------------- */
        if "OK" <> sysdsn(mstrjcl) then do
           in.0 = 1
           in.1 = "//IEFPDSI DSN=SYS1.PROCLIB  "
           end
        else do
             "Alloc f("ddn") ds("mstrjcl") shr reuse"
             "Execio * diskr" ddn "(finis stem in."
             "Free  f("ddn")"
             end

        /* ----------------------------------------------------- *
         * Find all proclibs in IEFPDSI and save them            *
         * Updates by ian.ramage@rs-components.com               *
         * ----------------------------------------------------- */
        hit = 0
        do i = 1 to in.0
          in.i  = TRANSLATE(in.i," ",",")
           if hit = 1 then do
              if substr(in.i,3,1) = " "
                 then do
                      parse value in.i with . "DSN=" dsn " " .
                      proclibs = proclibs dsn
                      end
                 else hit = 0
              end
           if left(in.i,9) = "//IEFPDSI" then do
              hit = 1
              parse value in.i with . "DSN=" dsn " " .
              dsn = word(strip(dsn),1)                  /* @OS2 */
              if pos("&",dsn) > 0 then call fix_sym     /* @OS2 */
              proclibs = proclibs dsn
              end
           end

        /* ----------------------------------------------------- *
         * Alloc all Master JCL Proclib's to DD: #PROCMST        *
         * ----------------------------------------------------- */
        alloc_procs = null
        do i = 1 to words(proclibs)
           proc  = "'"word(proclibs,i)"'"
           alloc_procs = strip(alloc_procs proc)
           end
        if j2opt = null then
           "Alloc f(#PROCMST) ds("alloc_procs") shr reuse"
           else do
                temp = translate(alloc_procs,"/"," ")
                return = "#PROCMST/"temp
                end

        /* ----------------------------------------------------- *
         * Now look thru Master JCL Proclibs for JES2 Proc       *
         * ----------------------------------------------------- */
         call find_lib

        /* ----------------------------------------------------- *
         * Now find all //PROCxx and save proc names             *
         * ----------------------------------------------------- */
         Start:
         procs = null
         hit = 0
         sym = "sym"
         proc = "proc"
         do i = 1 to in.0
            if word(in.i,2) = "INCLUDE" then do
               parse value in.i with . "MEMBER="jes2 .
               in.i = "//******** replaced "
               if pos("&",jes2) > 0 then do
                  parse value jes2 with left"&"symbol
                  syssym = mvsvar('symdef',symbol)
                  if syssym <> null then do
                     jes2 = left""syssym
                     end
                  end
               call find_lib
               signal start
               end
            if left(in.i,3) = "//*" then iterate
            If hit = 1 then do
               if substr(in.i,3,1) >= "A" then hit = 3
               end
            If pos(" PROC ",in.i) > 0 then hit = 1
            if hit = 3 then
               if left(in.i,6) = "//PROC" then do
                  parse value in.i with "//" w1 .
                  if length(w1) = 6 then
                      hit = 4
                  end
            if hit = 4 then do
               if left(in.i,6) <> "//PROC" then
                  if substr(in.i,3,1) >= "A" then hit = 3
               if left(in.i,6) = "//PROC" then do
                  parse value in.i with "//" w1 .
                  if length(w1) > 6 then hit = 3
                  end
               if hit = 3 then iterate
               if left(in.i,6) = "//PROC" then do
                  nn = substr(in.i,7,2)
                  proc.nn = null
                  procs = procs nn
                  end
               parse value in.i with . "DSN=" dsn ","
               dsn = word(strip(dsn),1)
               if pos("&",dsn) > 0 then call fix_sym
               if dsn <> null then do
                  if left(dsn,1) <> "'" then
                     dsn = "'"dsn"'"
                  proc.nn = proc.nn dsn
                  end
               end
            If hit = 1 then do
               If pos(" PROC ",in.i) > 0
                  then test = word(in.i,3)
                  else test = word(in.i,2)
               test = translate(test," ",",")
               if words(test) > 1 then
                 do j = 1 to words(test)
                    parse value word(test,j) with symb "=" dsn ","
                    sym.symb = strip(dsn)
                    syms = syms symb
                 end
               else do
                    parse value test with  symb "=" dsn ","
                    sym.symb = strip(dsn)
                    syms = syms symb
                    end
               end
            if hit >1 then iterate
            end

        /* ----------------------------------------------------- *
         * Now alloc DD: #PROCxx                                 *
         * ----------------------------------------------------- */
           alloc_procs = null
           do i = 1 to words(procs)
              if alloc_procs <> null then do
                 if j2opt = null then
                    "Alloc f(#PROC"nn") ds("alloc_procs")",
                    "shr reuse"
                 else do
                      alloc_procs = strip(alloc_procs)
                      temp = "#PROC"nn"/"translate(alloc_procs,'/',' ')
                      return = return temp
                      end
                 end
              nn = word(procs,i)
              alloc_procs = null
              do j = 1 to words(proc.nn)
                 pr = word(proc.nn,j)
                 alloc_procs = alloc_procs pr
                 end
              end
           if alloc_procs <> null then do
                 if j2opt = null then
                    "Alloc f(#PROC"nn") ds("alloc_procs")",
                    "shr reuse"
                 else do
                      alloc_procs = strip(alloc_procs)
                      temp = "#PROC"nn"/"translate(alloc_procs,'/',' ')
                      return = return temp
                      end
              end

        /* ----------------------------------------------------- *
         * Now invoke ISRDDN to display allocations if j2opt null*
         * ----------------------------------------------------- */
         if j2opt = null then do
           Address ISPExec
           lev = mvsvar('sysmvs')
           lev = substr(lev,3,1)
           if lev < 6 then do
              zedsmsg = null
              zedlmsg = "System and JES2 Proclib's",
                        "have been identified and allocated",
                        "using #PROCMST for the Master JCL",
                        "Proclibs and #PROCxx for the JES2",
                        "Proclibs.               ",
                        "Issue ONLY #PROC",
                        "to display only DD's with PROC in the",
                        "ddname."
              "Setmsg msg(isrz001)"
              "Select cmd(isrddn)"
              end
           else do
                zopt = "Only #PROC"
                "Select cmd(isrddn" zopt")"
                end

          /* -------------------------- *
           * Now free all allocations   *
           * -------------------------- */
           Address TSO
           "Free f(#PROCMST)"
           do i = 1 to words(procs)
              "Free f(#PROC"word(procs,i)
              end
           end

        /* -------------------------------------------- *
         * if j2opt not null then return with proc info *
         * -------------------------------------------- */
           if j2opt <> null then do
              return = translate(return,'$','#')
              return return
              end
           Exit 0

        /* ----------------------------------------------------- *
         * Fix up symbolics in the dsname                        *
         * ----------------------------------------------------- */
           Fix_Sym: procedure expose dsn syms sym. null
           do forever
              parse value dsn with left "&" symbol "." right
              syssym = mvsvar('symdef',symbol)
              if syssym <> null then do
                 dsn = left""syssym""right
                 end
              else do
                 if wordpos(symbol,syms) = 0 then leave
                 wp   = wordpos(symbol,syms)
                 symb = word(syms,wp)
                 hlq  = sym.symb
                 if left(hlq,1) = "'" then
                    parse value hlq with "'" hlq "'"
                 dsn  = left""hlq""right
                 end
              if pos("&",dsn) = 0 then leave
              end
           return

        /* ----------------------------------------------------- *
         * Fix volser for IPLPARM volume                         *
         * ----------------------------------------------------- */
           chk_volser: procedure
           parse arg unitnbr
           stat. = ""
           dumy = outtrap("stat.")
               "LISTDATA STATUS UNITNUMBER("strip(UNITNBR)")"
                 parse var stat.3   'VOLUME' volser 'DEVICE' .
           dumy = outtrap("off")
           return strip(volser)

        /* --------------------------------------------------------- *
         * Find Library for Proc                                     *
         * --------------------------------------------------------- */
         find_lib:
         do i = 1 to words(proclibs)
            proc  = "'"word(proclibs,i)"("jes2")'"
            if "OK" = sysdsn(proc) then leave
            end

        /* --------------------------------------------------------- *
         * Read in the JES2 Proc                                     *
         * --------------------------------------------------------- */
        "Alloc f("ddn") ds("proc") shr reuse"
        "Execio * diskr" ddn "(finis stem prc."
        "Free  f("ddn")"
        if in.0 = 0 then
           do i = 0 to prc.0
              in.i = prc.i
              end
        else do
             c = in.0
             do i = 1 to prc.0
                c = c + 1
                in.c = prc.i
                end
              in.0 = c
              end
        return
