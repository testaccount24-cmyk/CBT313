*---------------------------------------------------------------------*
*                                                                     *
* Name:        SLMREXXF                                               *
*                                                                     *
* Function:    Return to REXX variables all dsnames for the current   *
*              active system parmlibs                                 *
*                                                                     *
* Syntax:      X=SLMREXXF(STEM)                                       *
*                                                                     *
*              Where:                                                 *
*                                                                     *
*              STEM (with a period) into which the data set name      *
*              is to be placed.                                       *
*                                                                     *
*              STEM.0 will contain a count                            *
*                                                                     *
*              Defaults: none                                         *
*                                                                     *
*---------------------------------------------------------------------*
* Link Edit information:     NON-REENTRANT                            *
*---------------------------------------------------------------------*
* Return Codes:                                                       *
*                                                                     *
*         0    processing has completed successfully                  *
*        20    no parms                                               *
*        24    no datasets (huh?)                                     *
*                                                                     *
*---------------------------------------------------------------------*
* Author:      Lionel B. Dyck                                         *
*              Kaiser Permanente                                      *
*              Walnut Creek, CA 94598                                 *
*              (925) 926-5332                                         *
*              Internet: lionel.b.dyck@kp.org                         *
*---------------------------------------------------------------------*
* HISTORY:                                                            *
* 11/08/02 -  prepare for public release                              *
* 08/31/99 -  creation                                                *
*---------------------------------------------------------------------*
* Copyright (C) 2002, Lionel B. Dyck                                  *
*                                                                     *
* This program is free software; you can redistribute it              *
* and/or modify it under the terms of the GNU General Public          *
* License as published by the Free Software Foundation;               *
* either version 2 of the License, or (at your option) any            *
* later version.                                                      *
*                                                                     *
* This program is distributed in the hope that it will be             *
* useful, but WITHOUT ANY WARRANTY; without even the implied          *
* warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR             *
* PURPOSE.  See the GNU General Public License for more               *
* details.                                                            *
*                                                                     *
* You should have received a copy of the GNU General Public           *
* License along with this program; if not, write to the Free          *
* Software Foundation, Inc., 59 Temple Place - Suite 330,             *
* Boston, MA  02111-1307,                                             *
*                                                                     *
*---------------------------------------------------------------------*
SLMREXXF CSECT
SLMREXXF AMODE 31
*----------------------------------------------------------*
*        Housekeeping occurs here                          *
*----------------------------------------------------------*
         STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R12,R15             LOAD BASE REG
         USING SLMREXXF,R12        INFORM ASSEMBLER
         B     STARTIT
         DC    CL8'SLMREXXF'
         DC    C'-'
         DC    CL8'&SYSDATE'       COMPILE DATE
         DC    C'-'
         DC    CL8'&SYSTIME'       COMPILE TIME
STARTIT  DS    0H
         SPACE 2
         LA    R0,72+4000          get savearea plus workarea
         GETMAIN R,LV=(0)
         MVI   0(R1),X'00'         MOVE X'00' TO FIRST BYTE
         LR    R2,R1               SAVE POINTER IN EVEN REG
         LA    R4,1(R1)            SET RECEIVING POINTER
         LR    R5,R0               SET RECEIVING LENGTH
         BCTR  R5,R0               DECREMENT LENGTH
         LA    R5,0(R5)            CLEAR HIGH ORDER BYTE
         LA    R3,1                SET SENDING LENGTH
         MVCL  R4,R2               INSTRUCTION PADS WITH X'00'
         ST    R13,4(R1)           SAVE BACK CHAIN
         ST    R1,8(R13)           SET FORWARD CHAIN
         LR    R2,R1               SAVE NEW SAVEAREA ADDRESS
         L     R15,16(R13)         RESTORE REG 15
         ST    R0,16(R13)          SAVE SAVEAREA LENGTH
         LM    R0,R1,20(R13)       RESTORE REGS USED IN GETMAIN
         LR    R13,R2              SET SAVEAREA POINTER
         USING WORK,R13            USING ON WORKAREA VIA R13
         EJECT
*---------------------------------------------------------------------*
*        PROCESS THE INPUT PARAMETER LIST                             *
*---------------------------------------------------------------------*
         LR    R5,R0               -> ENVIRONMENT BLOCK
         ST    R5,ENVBADDR         Save Environment Block Address
         USING ENVBLOCK,R5
         L     R5,ENVBLOCK_IRXEXTE -> EXTERNAL VECTOR TABLE
         DROP  R5
         USING IRXEXTE,R5
         L     R5,IRXEXCOM         LOAD IRXEXCOM EPA
         ST    R5,EXCOM            SAVE IRXEXCOM EPA
         DROP  R5
         LR    R4,R1               -> EFPL
         USING EFPL,R4             ESTABLISH ADDRESSABILITY TO EFPL
         L     R5,EFPLEVAL         -> EVAL BLOCK ADDRESS POINTER
         L     R5,0(0,R5)          -> EVAL BLOCK
         ST    R5,EVALADDR         SAVE IT'S ADDRESS
         L     R4,EFPLARG          -> ARGUMENT LIST
         DROP  R4
*
         LTR   R4,R4               ANY ARGUMENT LIST ?
         BZ    EXIT20              No
*
         MVC   STEM,BLANKS         INITIALIZE THE STEM VALUE
         MVI   PSEP,C'/'           Set separator
*
         USING ARGTABLE_ENTRY,R4   ESTABLISH ADDRESSABILITY TO ARG
         CLC   =8X'FF',ARGTABLE_ARGSTRING_PTR  ANY REAL ARGUMENTS
         BE    EXIT20              NO - SO EXIT
         L     R2,ARGTABLE_ARGSTRING_PTR    -> ARGUMENT
         L     R3,ARGTABLE_ARGSTRING_LENGTH LOAD LENGTH
         BCTR  R3,R0               LESS 1 FOR MVC
         EX    R3,MOVESTEM         MOVE THE STEM
         LA    R1,STEM             -> Stem
         AR    R1,R3               Get Stem suffix offset
         LA    R1,1(R1)            Add back the 1 lost during mvc
         ST    R1,STEMSUFX         Now Save the Offset
         LA    R3,1(R3)            Add 1 to len
         ST    R3,STEMLEN          and save length
         EJECT
*---------------------------------------------------------------------*
*        INITIALIZE ALL WORK AREAS FROM OUR CONSTANTS                 *
*---------------------------------------------------------------------*
START    DS    0H
         OC    STEM(80),BLANKS     INSURE UPPER CASE
         MVC   RC,=C'24'           SET RC TO 24 to start with
*
         SR    R8,R8               ZERO STEM COUNTER
         EJECT
*---------------------------------------------------------------------*
*        Invoke IEFPRMLB to allocate to our ddname                    *
*---------------------------------------------------------------------*
         LA    R4,BUFFER
         USING PRM_LIST_BUFFER,R4
         MVI   PRM_LIST_VERSION,PRM_LIST_CURRENT_VERSION
         MVC   PRM_LIST_BUFF_SIZE,=AL4(1000)
         IEFPRMLB REQUEST=LIST,                                        x
               CALLERNAME=CALLER,                                      x
               RSNCODE=PRSN,                                           x
               RETCODE=PRC,                                            x
               PLISTVER=0,                                             x
               BUFFER=BUFFER
         L     R5,PRM_NUM_PARMLIB_DS  # of parmlib's
         LTR   R5,R5
         BZ    EXIT24             Return of zero datasets
         LA    R6,PRM_PLIB_DSN    -> 1st DSN
         LA    R7,PRM_PLIB_VOLSER -> 1ST VOL
DISP     DS    0H
         MVC   PDSN,0(R6)         Move DSN
         MVC   PVOL,0(R7)         Move Volser
         CLI   PVOL,X'00'         Null volser
         BE    MVOL
         B     MLEN
MVOL     MVC   PVOL,BLANKS
MLEN     MVC   LEN,=F'51'         Set length dsn + vol + sep
         BAS   R10,SETVAR
         LA    R6,L'PRM_PARMLIB_DS_INFO(,R6) BUMP ->
         LA    R7,L'PRM_PARMLIB_DS_INFO(,R7) BUMP ->
         BCT   R5,DISP            Continue until 0
         SPACE 2
*---------------------------------------------------------------------*
*        ALL parmlibs processed set stem.0 and exit                   *
*---------------------------------------------------------------------*
         CVD   R8,DWK
         MVC   COUNT(4),=X'F0202021'
         ED    COUNT(4),DWK+6
         MVC   PDSN,BLANKS
         MVC   PDSN(3),COUNT+1
         L     R4,STEMSUFX
         MVC   0(3,R4),BLANKS
         MVI   0(R4),C'0'          Set stem.0
         MVC   LEN,=F'04'          Set length of count
         OI    FLAG,X'10'          Set final flag
         L     R1,STEMLEN          Load stem. length
         LA    R1,1(R1)            Add 1
         ST    R1,STEMLENV         Save for SHVBLOCK
         BAS   R10,SETVAR
         B     EXIT0
         EJECT
SETVAR   DS    0H
         MVC   EXCOM1,=CL8'IRXEXCOM'
         XC    EXCOM2,EXCOM2
         LA    R9,EXCOM4
         USING SHVBLOCK,R9
         MVC   SHVVALL,LEN         Set Length (dsn + vol + sep)
         TM    FLAG,X'10'          Final flag ?
         BO    SETFINAL            Yes
         AH    R8,=H'01'           ADD 1 TO COUNTER
         CVD   R8,DWK
         MVC   COUNT(4),=X'F0202021'
         ED    COUNT(4),DWK+6
*
         L     R4,STEMSUFX
         MVC   0(3,R4),BLANKS
         LA    R1,COUNT+1         -> blank fill character
         LA    R2,2               set loop counter
CNTLP    DS    0H
         CLI   0(R1),C'0'          is it higher than 0
         BH    CNTMVC              yes - now move it
         LA    R1,1(,R1)           no  - bump pointer
         BCT   R2,CNTLP
CNTMVC   DS    0H
         EX    R2,MOVECNT
         LA    R2,1(R2)            Bump count
         A     R2,STEMLEN          Add current Stem length
         ST    R2,STEMLENV         And save it
*
SETFINAL DS    0H
         XC    SHVNEXT,SHVNEXT     ZERO CHAIN POINTER
         XC    SHVCODES,SHVCODES   ZERO CODES
         MVI   SHVCODE,C'S'        SET VARIABLE USING Direct method
         LA    R4,PDSN             ADDRESS OF STEM VALUE
         ST    R4,SHVVALA          SAVE ADDRESS OF STEM VALUE
         LA    R4,STEM             ADDRESS OF STEM NAME
         ST    R4,SHVNAMA          SAVE ADDRESS OF STEM NAME
         MVC   SHVNAML,STEMLENV    Set the stem.nnn length
*
         B     DOEXCOM
*
DOEXCOM  DS    0H
         OI    FLAG,X'01'          SET ADD FLAG
         LA    R1,EXCOM1
         ST    R1,EXADDR1
         LA    R1,EXCOM2
         ST    R1,EXADDR2
         ST    R1,EXADDR3
         LA    R1,EXCOM4
         ST    R1,EXADDR4
         OI    EXADDR4,X'80'       SET HIGH FLAG
         LA    R1,EXADDR1
         L     R15,EXCOM           -> IRXEXCOM MODULE
         L     R0,ENVBADDR         -> Environment Block
         BASR  R14,R15
         BR    R10                 RETURN TO CALLER
         DROP  R9
         EJECT
*---------------------------------------------------------------------*
*        ALL OF THE EXIT ROUTINES FOLLOW                              *
*---------------------------------------------------------------------*
SETRC    DS    0H
         L     R11,EVALADDR
         USING EVALBLOCK,R11
         MVC   EVALBLOCK_EVLEN(4),=A(2)
         MVC   EVALBLOCK_EVDATA(2),RC
         DROP  R11
         SPACE 2
         LR    R1,R13              GET SAVEAREA ADDRESS
         L     R13,4(R13)          GET BACK CHAIN POINTER
         L     R0,16(R13)          GET SAVEAREA LENGTH
         ST    R15,16(R13)         SAVE REGISTER 15 (RETCODE)
         FREEMAIN R,LV=(0),A=(1)   FREE SAVEAREA
         LM    R14,R12,12(R13)     RESTORE CALLERS REGS
         LA    R15,0                                        $1/95$
         BR    R14
*---------------------------------------------------------------------*
EXIT0    DS    0H
         TM    FLAG,X'01'
         BZ    EXIT4               NO ROWS ADDED TO THE TABLE
         MVC   RC,=C'00'           SET RC TO ZERO
         B     SETRC
EXIT4    DS    0H
         MVC   RC,=C'04'           SET RC
         B     SETRC
EXIT8    DS    0H
         MVC   RC,=C'08'           SET RC
         B     SETRC
EXIT12   DS    0H
         MVC   RC,=C'12'           SET RC
         B     SETRC
EXIT16   DS    0H
         MVC   RC,=C'16'           SET RC
         B     SETRC
EXIT20   DS    0H
         MVC   RC,=C'20'           SET RC
         B     SETRC
EXIT24   DS    0H
         MVC   RC,=C'24'           SET RC
         B     SETRC
         EJECT
*---------------------------------------------------------------------*
*        EXECUTED INSTRUCTIONS                                        *
*---------------------------------------------------------------------*
MOVESTEM MVC   STEM(0),0(R2)       ** EXECUTED
MOVECNT  MVC   0(0,R4),0(R1)       ** Executed
         SPACE 2
*---------------------------------------------------------------------*
*        LITERAL POOL                                                 *
*---------------------------------------------------------------------*
         LTORG
         EJECT
*---------------------------------------------------------------------*
*        CONSTANTS                                                    *
*---------------------------------------------------------------------*
BLANKS   DC    CL80' '
NOPARMDS DC    C'No parmlib datassets found'
CALLER   DC    CL16'PARMLIB LIST'
         EJECT
*---------------------------------------------------------------------*
*        WORK AREA DSECTS                                             *
*---------------------------------------------------------------------*
WORK     DSECT
SAVE     DS    18F
DWK      DS    D
EVALADDR DS    F
EXCOM    DS    A                   ADDRESS OF IRXEXCOM LOAD MODULE
ENVBADDR DS    A                   Environment Block Address
DDNAME   DS    CL8                 PASSED DDNAME
PDSN     DS    CL44                data set name
PSEP     DS    C                   Separator
PVOL     DS    CL6                 volser
LEN      DS    F                   LENGTH OF STEM VALUE
BUFFER   DS    XL1000              IEFPRMLB Buffer
STEM     DS    CL80
STEMSUFX DS    F                   -> STEM SUFFIX LOCATION
STEMLEN  DS    F                   Length of stem.
STEMLENV DS    F                   Length of stem. plus suffix
COUNT    DS    CL4                 COUNTER
PRC      DS    F
PRSN     DS    F
RC       DS    XL2                 RETURN CODE
FLAG     DS    X
*
         SPACE 1
EXADDRS  DS    0D
EXADDR1  DS    A(EXCOM1)
EXADDR2  DS    A(EXCOM2)
EXADDR3  DS    A(EXCOM2)
EXADDR4  DS    A(EXCOM4)
EXCOM1   DS    CL8                 CL8'IREXCOM'
EXCOM2   DS    A                   0 (used for exaddr2/3)
EXCOM4   DS    XL32                SHVBLOCK DATA (USING SHVBLOCK)
         EJECT
         IEFZPMAP
         EJECT
         IRXEFPL DSECT=YES
         EJECT
         IRXARGTB
         EJECT
         IRXSHVB
         EJECT
         IRXEVALB
         EJECT
         IRXEXTE
         EJECT
         IRXENVB
         EJECT
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END   ,
