/* ---------------------  rexx procedure  ---------------------- *
 * Name:      TSOPROF                                            *
 *                                                               *
 * Function:  Process the TSO Profile command via an ISPF        *
 *            PANEL.                                             *
 *                                                               *
 * Syntax:    Either:                                            *
 *            %TSOPROF                                           *
 *        or                                                     *
 *            TSOPROF                                            *
 *                                                               *
 * ISPF Requirements:                                            *
 *                                                               *
 *      Panels:  TSOPROF                                         *
 *                                                               *
 *      ISP Command Table Entry:                                 *
 *          TSOPROF   4  SELECT CMD(%TSOPROF)                    *
 *                    TSO/E Profile review and update dialog     *
 *                                                               *
 * Author:    Lionel B. Dyck                                     *
 *                                                               *
 * History:                                                      *
 *            02/09/18 - Put all panels inline and add a tutorial*
 *                       panel                                   *
 *                     - update for 8 char userids               *
 *            08/11/16 - Updated to add VARSTORAGE               *
 *            01/10/91 - Created by Lionel Dyck                  *
 *                                                               *
 * Notes:  1)  The non-VTAM PROFILE options of LINE/NOLINE       *
 *             and CHAR/NOCHAR are not supported.                *
 *                                                               *
 *         2)  The RECOVER/NORECOVER options are not supported   *
 *             at Rockwell and thus are not supported by this    *
 *             dialog.                                           *
 * ------------------------------------------------------------- */

  x = outtrap("prof.",'*')
  "PROFILE"
  x = outtrap("off")

disp:
  if wordpos("PROMPT",prof.1) > 0
  then prompt = "YES"
  else prompt = "NO"

  if wordpos("PAUSE",prof.1) > 0
  then pause = "YES"
  else pause = "NO"

  if wordpos("INTERCOM",prof.1) > 0
  then intercom = "YES"
  else intercom = "NO"

  if wordpos("MSGID",prof.1) > 0
  then msgid = "YES"
  else msgid = "NO"

  if wordpos("MODE",prof.1) > 0
  then mode = "YES"
  else mode = "NO"

  if wordpos("WTPMSG",prof.1) > 0
  then wtpmsg = "YES"
  else wtpmsg = "NO"

  if pos('VARSTORAGE(',prof.1) > 0 then
  parse value prof.1 with . 'VARSTORAGE('varstor')' .

/* ------------------------------------ *
 | Change varstor for the panel display |
 * ------------------------------------ */
  if varstor = 'HIGH'
  then varstor = 'YES'
  else varstor = 'NO'

/* ---------------------------------------------------- *
 *   Disabled because we do not use recover here        *
 * ---------------------------------------------------- *
if wordpos("RECOVER",prof.1) > 0 then recover = "YES"
                                    else recover = "NO"
 * ---------------------------------------------------- */

  if wordpos("NOPREFIX",prof.1) > 0 then prefix = ""
  else parse value prof.1 with . "PREFIX(" prefix ")" .

/* ---------------------- *
 | Load the ISPF Panel(s) |
 * ---------------------- */
  load_info = loadispf()

  Address ISPEXEC "DISPLAY PANEL(TSOPROF)"
  drc = rc
  if drc > 0 then do
    zedsmsg = ""
    zedlmsg = "TSO Profile Processing terminated"
    signal do_message
  end

  if prompt   = "YES"
  then prompt = "PROMPT"
  else prompt = "NOPROMPT"

  if pause    = "YES"
  then pause = "PAUSE"
  else pause = "NOPAUSE"

  if intercom = "YES"
  then intercom = "INTERCOM"
  else intercom = "NOINTERCOM"

  if msgid    = "YES"
  then msgid = "MSGID"
  else msgid = "NOMSGID"

  if mode     = "YES"
  then mode = "MODE"
  else mode = "NOMODE"

  if varstor  = 'YES'
  then varstor = 'VARSTORAGE(HIGH)'
  else varstor = 'VARSTORAGE(LOW)'

  if wtpmsg   = "YES" then wtpmsg = "WTPMSG"
  else wtpmsg = "NOWTPMSG"

  recover = ""
/* ---------------------------------------------------- *
 *   Disabled because we do not use recover here        *
 * ---------------------------------------------------- *
 if recover = "YES" then recover = "RECOVER"
                    else recover = "NORECOVER"
 * ---------------------------------------------------- */

  if prefix = ""
  then prefix = "NOPREFIX"
  else prefix = "PREFIX("prefix")"

  "PROFILE" prompt pause intercom msgid mode wtpmsg ,
    recover prefix varstor

  zedsmsg = ""
  zedlmsg = "Profile:" prompt pause intercom msgid mode wtpmsg,
    recover prefix varstor

/* ------------------------------- *
 | Issue ISPF Message about action |
 | Free the ISPF Panel Library     |
 | Exit                            |
 * ------------------------------- */
do_message:
  Address ISPEXEC
  "SETMSG MSG(ISRZ000)"
  do until length(load_info) = 0
    parse value load_info with dd libd load_info
    "libdef" libd
    address tso "free f("dd")"
  end
  Exit 0

/* --------------------  rexx procedure  -------------------- *
 * Name:      LoadISPF                                        *
 *                                                            *
 * Function:  Load ISPF elements that are inline in the       *
 *            REXX source code.                               *
 *                                                            *
 * Syntax:    rc = loadispf()                                 *
 *                                                            *
 *            The inline ISPF resources are limited to        *
 *            ISPF Messages, Panels, and Skeletons,           *
 *                 CLISTs and EXECs are also supported.       *
 *                                                            *
 *            The inline resources must start in column 1     *
 *            and use the following syntax:                   *
 *                                                            *
 *            >START    used to indicate the start of the     *
 *                      inline data                           *
 *                                                            *
 *            >END    - used to indicate the end of the       *
 *                      inline data                           *
 *                                                            *
 *            Each resource begins with a type record:        *
 *            >type name                                      *
 *               where type is CLIST, EXEC, MSG, PANEL, SKEL  *
 *                     name is the name of the element        *
 *                                                            *
 * Sample usage:                                              *
 *          -* rexx *-                                        *
 *          load_info = loadispf()                            *
 *          ... magic code happens here (your code) ...       *
 *          Address ISPEXEC                                   *
 *          do until length(load_info) = 0                    *
 *             parse value load_info with dd libd load_info   *
 *             if left(libd,6) = "ALTLIB" then do             *
 *                if libd = "ALTLIBC" then lib = "CLIST"      *
 *                                    else lib = "EXEC"       *
 *                Address TSO,                                *
 *                  "Altlib Deact Application("lib")"         *
 *                end                                         *
 *             else "libdef" libd                             *
 *             address tso "free f("dd")"                     *
 *             end                                            *
 *          exit                                              *
 *          >Start inline elements                            *
 *          >Panel panel1                                     *
 *          ...                                               *
 *          >Msg msg1                                         *
 *          ...                                               *
 *          >End of inline elements                           *
 *                                                            *
 * Returns:   the list of ddnames allocated for use along     *
 *            with the libdef's performed or altlib           *
 *                                                            *
 *            format is ddname libdef ddname libdef ...       *
 *                   libdef may be altlibc or altlibe         *
 *                   for altlib clist or altlib exec          *
 *                                                            *
 * Notes:     Entire routine must be included with REXX       *
 *            exec - inline with the code.                    *
 *                                                            *
 * Comments:  The entire rexx program is processed from the   *
 *            last record to the first to find the >START     *
 *            record at which point all records from that     *
 *            point on are processed until the >END           *
 *            statement or the end of the program is found.   *
 *                                                            *
 *            It is *strongly* suggested that the inline      *
 *            elements be at the very end of your code so     *
 *            that the search for them is faster.             *
 *                                                            *
 *            Inline ISPTLIB or ISPLLIB were not supported    *
 *            because the values for these would have to be   *
 *            in hex.                                         *
 *                                                            *
 * Author:    Lionel B. Dyck                                  *
 *                                                            *
 * History:                                                   *
 *            08/29/17 - Fixup static values that were vars   *
 *            05/31/17 - Change default directory count       *
 *            12/09/16 - update for add_it routine            *
 *            05/10/16 - correction for clist and exec        *
 *            04/19/16 - bug correction                       *
 *            06/04/04 - Enhancements for speed               *
 *            08/05/02 - Creation                             *
 *                                                            *
 * ---------------------------------------------------------- *
 * Disclaimer: There is no warranty, either explicit or       *
 * implied with this code. Use it at your own risk as there   *
 * is no recourse from either the author or his employeer.    *
 * ---------------------------------------------------------- */
LoadISPF: Procedure

  parse value "" with null kmsg kpanel kskel first returns ,
    kclist kexec
/* ------------------------------------------------------- *
 * Find the InLine ISPF Elements and load them into a stem *
 * variable.                                               *
 *                                                         *
 * Elements keyword syntax:                                *
 * >START - start of inline data                           *
 * >CLIST name                                             *
 * >EXEC name                                              *
 * >MSG name                                               *
 * >PANEL name                                             *
 * >SKEL name                                              *
 * >END   - end of all inline data (optional if last)      *
 * ------------------------------------------------------- */
  last_line = sourceline()
  do i = last_line to 1 by -1
    line = sourceline(i)
    if translate(left(line,6)) = ">START " then leave
  end
  rec = 0
/* --------------------------------------------------- *
 * Flag types of ISPF resources by testing each record *
 * then add each record to the data. stem variable.    *
 * --------------------------------------------------- */
  do j = i+1 to last_line
    line = sourceline(j)
    if translate(left(line,5)) = ">END "   then leave
    if translate(left(line,7)) = ">CLIST " then kclist = 1
    if translate(left(line,6)) = ">EXEC "  then kexec  = 1
    if translate(left(line,5)) = ">MSG "   then kmsg   = 1
    if translate(left(line,7)) = ">PANEL " then kpanel = 1
    if translate(left(line,6)) = ">SKEL "  then kskel  = 1
    rec  = rec + 1
    data.rec = line
  end

/* ----------------------------------------------------- *
 * Now create the Library and Load the Member(s)         *
 * ----------------------------------------------------- */
  Address ISPExec
/* ----------------------------- *
 * Assign dynamic random ddnames *
 * ----------------------------- */
  clistdd = "lc"random(999)
  execdd  = "le"random(999)
  msgdd   = "lm"random(999)
  paneldd = "lp"random(999)
  skeldd  = "ls"random(999)

/* ---------------------------------------- *
 *  LmInit and LmOpen each resource library *
 * ---------------------------------------- */
  if kclist <> null then do
    call alloc_dd clistdd
    "Lminit dataid(clist) ddname("clistdd")"
    "LmOpen dataid("clist") Option(Output)"
    returns = strip(returns clistdd 'ALTLIBC')
  end
  if kexec <> null then do
    call alloc_dd execdd
    "Lminit dataid(exec) ddname("execdd")"
    "LmOpen dataid("exec") Option(Output)"
    returns = strip(returns execdd 'ALTLIBE')
  end
  if kmsg <> null then do
    call alloc_dd msgdd
    "Lminit dataid(msg) ddname("msgdd")"
    "LmOpen dataid("msg") Option(Output)"
    returns = strip(returns msgdd 'ISPMLIB')
  end
  if kpanel <> null then do
    call alloc_dd paneldd
    "Lminit dataid(panel) ddname("paneldd")"
    "LmOpen dataid("panel") Option(Output)"
    returns = strip(returns paneldd 'ISPPLIB')
  end
  if kskel <> null then do
    call alloc_dd skeldd
    "Lminit dataid(skel) ddname("skeldd")"
    "LmOpen dataid("skel") Option(Output)"
    returns = strip(returns skeldd 'ISPSLIB')
  end

/* ----------------------------------------------- *
 * Process all records in the data. stem variable. *
 * ----------------------------------------------- */
  do i = 1 to rec
    record = data.i
    recordu = translate(record)
    if left(recordu,5) = ">END " then leave
    if left(recordu,7) = ">CLIST " then do
      if first = 1 then call add_it
      type = "Clist"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,6) = ">EXEC " then do
      if first = 1 then call add_it
      type = "Exec"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,5) = ">MSG " then do
      if first = 1 then call add_it
      type = "Msg"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,7) = ">PANEL " then do
      if first = 1 then call add_it
      type = "Panel"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,6) = ">SKEL " then do
      if first = 1 then call add_it
      type = "Skel"
      first = 1
      parse value record with x name
      iterate
    end
   /* --------------------------------------------*
    * Put the record into the appropriate library *
    * based on the record type.                   *
    * ------------------------------------------- */
    Select
      When type = "Clist" then
      "LmPut dataid("clist") MODE(INVAR)" ,
        "DataLoc(record) DataLen(255)"
      When type = "Exec" then
      "LmPut dataid("exec") MODE(INVAR)" ,
        "DataLoc(record) DataLen(255)"
      When type = "Msg" then
      "LmPut dataid("msg") MODE(INVAR)" ,
        "DataLoc(record) DataLen(80)"
      When type = "Panel" then
      "LmPut dataid("panel") MODE(INVAR)" ,
        "DataLoc(record) DataLen(80)"
      When type = "Skel" then
      "LmPut dataid("skel") MODE(INVAR)" ,
        "DataLoc(record) DataLen(80)"
      Otherwise nop
    end
  end
  if type <> null then call add_it
/* ---------------------------------------------------- *
 * Processing completed - now lmfree the allocation and *
 * Libdef the library.                                  *
 * ---------------------------------------------------- */
  if kclist <> null then do
    Address TSO,
      "Altlib Act Application(Clist) File("clistdd")"
    "LmFree dataid("clist")"
  end
  if kexec <> null then do
    Address TSO,
      "Altlib Act Application(Exec) File("execdd")"
    "LmFree dataid("exec")"
  end
  if kmsg <> null then do
    "LmFree dataid("msg")"
    "Libdef ISPMlib Library ID("msgdd") Stack"
  end
  if kpanel <> null then do
    "Libdef ISPPlib Library ID("paneldd") Stack"
    "LmFree dataid("panel")"
  end
  if kskel <> null then do
    "Libdef ISPSlib Library ID("skeldd") Stack"
    "LmFree dataid("skel")"
  end
  return returns

/* --------------------------- *
 * Add the Member using LmmAdd *
 * based upon type of resource *
 * --------------------------- */
Add_It:
  Select
    When type = "Clist" then
    "LmmAdd dataid("clist") Member("name")"
    When type = "Exec" then
    "LmmAdd dataid("exec") Member("name")"
    When type = "Msg" then
    "LmmAdd dataid("msg") Member("name")"
    When type = "Panel" then
    "LmmAdd dataid("panel") Member("name")"
    When type = "Skel" then
    "LmmAdd dataid("skel") Member("name")"
    Otherwise nop
  end
  type = null
  return

/* ------------------------------ *
 * ALlocate the temp ispf library *
 * ------------------------------ */
Alloc_DD:
  arg dd
  Address TSO
  if pos(left(dd,2),"lc le") > 0 then
  "Alloc f("dd") unit(sysda) spa(5,5) dir(5)",
    "recfm(v b) lrecl(255) blksize(32760)"
  else
  "Alloc f("dd") unit(sysda) spa(5,5) dir(5)",
    "recfm(f b) lrecl(80) blksize(23440)"
  return
>Start
>Panel TSOPROF
)ATTR DEFAULT(%+_)
%   TYPE(TEXT) INTENS(HIGH)
_   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT)
# TYPE(TEXT) INTENS(HIGH) COLOR(yellow)
+ TYPE(TEXT) INTENS(LOW) COLOR(turq)
@ TYPE(OUTPUT) INTENS(HIGH) COLOR(yellow)
)BODYExpand(\\)
#-\-\ (TSO Profile Review/Update) \-\-
%Command ===>_ZCMD
%
%    Specify#YES%or#NO%for the following options:
%
    _Z   +    #PROMPT     +for additional information if required
    _Z   +    #INTERCOM   +messages from other terminal users
    _Z   +    #PAUSE      +prompt via ? for second level messages
    _Z   +    #MSGID      +display message identifiers
    _Z   +    #MODE       +display mode messages on the terminal
    _Z   +    #VARSTORAGE +location for REXX variables (Yes=High No=Low)
    _Z   +    #WTPMSG     +display write-to-programmer messages
%
%    Verify the your prefix below as this is used for all unqualified data set
%    allocations.  This is normally the same as your TSO userid (@ZUSER   %)
%
    _Z        #PREFIX  +prefix for unqualified data sets or null
+
+
%    Make any desired changes and press#ENTER%to effect the changes.
%    Press#END%to cancel changes.
)INIT
  .CURSOR = ZCMD
  .zvars = '(prompt intercom pause msgid mode varstor wtpmsg prefix)'
  .help = tsoprofh
)PROC
   &PROMPT = TRANS(TRUNC(&PROMPT,1) Y,YES N,NO)
   VER (&PROMPT,LIST,YES,NO)
   &INTERCOM = TRANS(TRUNC(&INTERCOM,1) Y,YES N,NO)
   VER (&INTERCOM,LIST,YES,NO)
   &PAUSE    = TRANS(TRUNC(&PAUSE,1) Y,YES N,NO)
   VER (&PAUSE,LIST,YES,NO)
   &MSGID    = TRANS(TRUNC(&MSGID,1) Y,YES N,NO)
   VER (&MSGID,LIST,YES,NO)
   &MODE     = TRANS(TRUNC(&MODE,1) Y,YES N,NO)
   VER (&MODE,LIST,YES,NO)
   &VARSTOR  = TRANS(TRUNC(&VARSTOR,1) Y,YES N,NO)
   VER (&VARSTOR,NB,LIST,YES,NO)
   &WTPMSG   = TRANS(TRUNC(&WTPMSG,1) Y,YES N,NO)
   VER (&WTPMSG,LIST,YES,NO)
   VER (&PREFIX,NAME)
)END
   The following are here because we do not use RECOVER as an allowed option
   but you can if you wish to use this dialog and want recover.
   _Z  +    #RECOVER +use the TSO EDIT recovery function for all TSO EDIT sessio
   &RECOVER  = TRANS(TRUNC(&RECOVER,1) Y,YES N,NO)
   VER (&RECOVER,LIST,YES,NO)
   .zvars = '(prompt intercom pause msgid mode wtpmsg recover prefix)'
>Panel TSOPROFH
)ATTR DEFAULT(%+_)
   # TYPE(TEXT) INTENS(HIGH) COLOR(yellow)
   @ TYPE(OUTPUT) INTENS(HIGH) COLOR(yellow)
)BODY Expand(\\)
#-\-\ (TSO Profile Review/Update Tutorial) \-\-
%Command ===>_ZCMD
%
+This dialog allows the user to review, and optionally update, some of the
#TSO Profile+settings.
%
+See the TSO Help for#PROFILE+for more details.
+
+After changes have been made use the#ENTER+key to lock in the changes,
+or press the#END+key to cancel the changes.
)INIT
  .CURSOR = ZCMD
  &ZCONT = TSOPROFH
)PROC
)END
>End
