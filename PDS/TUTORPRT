/* --------------------  rexx procedure  -------------------- *
 | Name:      tutorprt                                        |
 |                                                            |
 | Function:  Extract the ISPF tutorial text into a file      |
 |            for use.                                        |
 |                                                            |
 | Syntax:    %tutorprt dsname starting-panel opt             |
 |                                                            |
 |            If the starting panel ends with an * then       |
 |            all members in the dsname starting with the     |
 |            panel prefix will be processed.                 |
 |                                                            |
 |            if opt is:                                      |
 |                 blank - no-cc and view results             |
 |                 A generate with ASA CC                     |
 |                 P generate with ASA CC and call txt2pdf    |
 |                 R generate with ASA CC and call txt2rtf    |
 |                 H generate with ASA CC and call txt2html   |
 |                                                            |
 | Notes:     All attribute characters will be translated     |
 |            to blanks.                                      |
 |                                                            |
 | Author:    Lionel B. Dyck                                  |
 |                                                            |
 | History:  (most recent on top)                             |
 |            03/14/20 LBD - bug fix caused blank lines       |
 |            02/26/20 LBD - Creation                         |
 |                                                            |
 * ---------------------------------------------------------- */
  arg dsn start ccopt

  if length(dsn) = 0 then do
    say 'missing a dataset name and starting panel name'
    say 'exiting try again...'
    exit 8
  end

  if length(start) = 0 then do
    say 'missing a starting panel name'
    say 'exiting try again...'
    exit 12
  end

  x = listdsi(dsn)
  if x > 0 then do
    say 'bad dsn' dsn
    say sysmsglvl2
    exit 8
  end

  dsn = sysdsname

  parse value '' with order next done null
  tc = 0
  dd = 'te'time('s')

  if right(start,1) = '*' then do
    call outtrap 'm.'
    'listd' "'"dsn"' M"
    call outtrap 'off'
    parse value start with pref'*'
    start = null
    pl = length(pref)
    do i = 7 to m.0
      m = word(m.i,1)
      if left(m,pl) = pref then
      order = order m
    end
  end

  if start /= null then order = start order

  do until length(order) = 0
    parse value order with next order
    if next = null then leave
    call read next
  end

  if sysvar('syspref') = null then hlq = sysvar('sysuid')
  else hlq = sysvar('syspref')
  if start = null then start = pref
  tutordsn = "'"hlq".tutor."start".text'"
  call outtrap 'x.'
  'delete' tutordsn
  call outtrap 'off'
  if ccopt /= null then do
    recfm = 'v b a'
    lrecl = '85'
  end
  else do
    recfm = 'v b'
    lrecl = '84'
  end
  'alloc f('dd') new spa(15,15) tr recfm('recfm') lrecl('lrecl')' ,
    'ds('tutordsn') blksize(0)'
  'execio * diskw' dd '(finis stem text.'
  'free  f('dd')'

  call outtrap 'x.'
  Select
    When ccopt = 'A' then call list_ds
    When ccopt = 'H' then do
      tutorpdf = "'"hlq".tutor."start".html'"
      '%txt2html in' tutordsn 'out' tutorpdf ,
        'CC Yes'
        end
    When ccopt = 'R' then do
      tutorrtf = "'"hlq".tutor."start".rtf'"
      '%txt2rtf' tutordsn tutorrtf ,
         'CC FONT 9' ,
         'MARGINS 0.8/0.8/1.0/1.0' ,
         'ORIENTATION PORTRAIT' ,
         'PAPER LETTER' ,
         'LINESPACE 1'
         call list_ds
    end
    When ccopt = 'P' then do
      tutorpdf = "'"hlq".tutor."start".pdf'"
      '%txt2pdf in' tutordsn 'out' tutorpdf ,
      'FONT 9/Courier/100' ,
      'CC Yes' ,
      'CONFIRM Yes' ,
      'LPI 8' ,
      'TM 0.5 BM 0.5 LM 0.5 RM 0.5' ,
      'ORIENT Portrait' ,
      'PAPER let//'
         call list_ds
    end
    Otherwise call list_ds
  end
  call outtrap 'off'
  exit

List_DS:
  hlq = hlq'.tutor.'start
  Address ISPExec
  "LMDINIT LISTID(LISTID) LEVEL("hlq")"
  "LMDDISP LISTID("ListId") Confirm(Yes)",
    "View(Volume)"
  "LMDFREE LISTID("ListId")"
  return

read:
  arg panel
  if wordpos(panel,done) = 0
  then done = done panel
  else return
  parse value '' with next attrs expand hit pan rexx area
  tc = tc + 1
  text.tc = '>Panel' panel
  if ccopt /= null then text.tc = '1'text.tc
  tc = tc + 1
  text.tc = left('-',80,'-')
  if ccopt /= null then text.tc = ' 'text.tc
  "alloc f("dd") shr reuse ds('"dsn"("panel")')"
  'execio * diskr 'dd '(finis stem in.'
  'free  f('dd')'
/* --------------------------------- *
 | hit = 0 checking for data we need |
 | hit = 1 in the Proc section       |
 | hit = 2 found the body            |
 * --------------------------------- */
  do i = 1 to in.0
    d = translate(in.i)
    if word(d,1) = '/*' then iterate
    if left(d,5) = '*REXX' then rexx = 1
    if left(d,8) = '*ENDREXX' then rexx = 0
    if rexx = 1 then iterate
    if left(d,5) = ')ATTR' then do
      hit = 0
      if pos('(',d) > 0 then parse value d with x '('attrs')' .
      else attrs = '%+_'
    end
    if hit = 0 then do
      if pos('TYPE',d) > 0 then do
        at = strip(word(d,1))
        if length(at) = 2 then at = x2c(at)
        attrs = attrs''at
      end
      if pos('AREA',d) > 0 then do
        at  = word(d,1)
        if length(at) = 2 then at = x2c(at)
        area = at
        attrs = attrs''at
      end
    end
    if left(d,5) = ')INIT' then hit = 3
    if left(d,5) = ')BODY' then do
      hit = 2
      if pos('EXPAND',d) > 0 then parse value d with . 'EXPAND('expand')'
      attrs = attrs''expand
    end
    if left(d,5) = ')PROC' then hit = 1
    if left(d,4) = ')END' then do
      tc = tc + 1
      text.tc = left('-',80,'-')
      if ccopt /= null then text.tc = ' 'text.tc
      return
    end
    if hit = 0 then iterate
    if hit = 2 then do
      if area /= null then
      if left(d,1) = area then iterate
      if word(d,1) = ')AREA' then iterate
      if pos('===>',d) > 0 then iterate
      if left(d,1) = ')' then iterate
      tc = tc + 1
      text.tc = translate(in.i,' ',attrs)
      if ccopt /= null then text.tc = ' 'text.tc
    end
    if hit = 1 then do
      if word(d,1) = '&ZSEL' then iterate
      if pos(',',d) > 0 then parse value d with x','pan .
      if x = '*' then iterate
      if left(pan,1) = '*' then pan = substr(pan,2)
      pan = translate(pan)
      if wordpos(pan,order) = 0 then
      order =  order pan
      if pos('&ZCONT',d) > 0 then parse value d with x '=' next .
    end
    if hit = 3 then do
      if pos('&ZCONT',d) > 0 then parse value d with x '=' next .
    end
    if next /= null then order = next order
  end
  return
