/* --------------------  rexx procedure  -------------------- *
 * Name:      SetClip                                         *
 *                                                            *
 * Function:  Setup my Clipboards                             *
 *                                                            *
 *            Dual purpose depending on the parm option       *
 *                                                            *
 * Syntax:    %setclip option                                 *
 *                                                            *
 *            options:                                        *
 *                                                            *
 *            blank = ispf dialog to manage                   *
 *            non-blank = set                                 *
 *                                                            *
 * Dependencies:   setclipm edit macro                        *
 *                 setclipp ispf panel                        *
 *                 Must be under applid of SCLP               *
 *                                                            *
 * Notes:     use CUT DISplay to view clipboards              *
 *            use Paste clipboard to paste into edit text     *
 *                                                            *
 *            Each time the Enter key is used all defined     *
 *            clipboards will be created or updated.          *
 *                                                            *
 *            If Enter is not used then PF3 will create or    *
 *            update the defined clipboards.                  *
 *                                                            *
 * Author:    Lionel B. Dyck                                  *
 *                                                            *
 * Dependencies:  The SETZSTRT exec (included in this package)*
 *                                                            *
 * History:                                                   *
 *            04/25/17 - Change Edit to View for Clipboard    *
 *                       copy                                 *
 *            10/21/16 - Clean up SET messages                *
 *            10/20/16 - Add SET command to update ZSTART     *
 *                       ISPF Profile variable by calling     *
 *                       SETZSTRT exec.                       *
 *            09/22/16 - Update check for changes             *
 *            09/21/16 - Reset Counter                        *
 *                     - change to use msg isrz002 so the     *
 *                       tutorial panel can be defined        *
 *            09/20/16 - Clean up to prevent duplicate update *
 *                       on exit                              *
 *            09/19/16 - Add test for X and NX (not allowed)  *
 *                     - additional cleanup/checking          *
 *                     - sort the clipboard list              *
 *                     - Add Browse and Edit options          *
 *            09/16/16 - Make sure PF3 updates before leaving *
 *                     - remove update message if option      *
 *                       not blank                            *
 *                     - If clipboard name but no dsname balk *
 *            09/15/16 - Add start and ending rows to cut     *
 *                     - add cancel command                   *
 *            09/14/16 - Major rewrite to include panel to    *
 *                       define the clipboards                *
 *            09/13/16 - Creation                             *
 *                                                            *
 * ---------------------------------------------------------- *
 * Support is on a best effort and time available basis which *
 * is why the complete source is provided for this application*
 * so you can find and fix any issues you find. Please let    *
 * me know if you do make changes/enhancements/fixes.         *
 * ---------------------------------------------------------- *
 * License:   This EXEC and related components are released   *
 *            under terms of the GPLV3 License. Please        *
 *            refer to the LICENSE file for more information. *
 *            Or for the latest license text go to:           *
 *                                                            *
 *              http://www.gnu.org/licenses/                  *
 * ---------------------------------------------------------- */

 arg option

/* -------------------------------------------------- *
 * Test for the SCLP ISPF Applid and if not then      *
 * - re-invoke ourselves with NewAppl(SCLP)           *
 * - upon return then exit                            *
 * -------------------------------------------------- */
 Address ISPExec
 "Vget (Zapplid)"
 "Control Errors Return"
 if zapplid <> "SCLP" then do
     "Select CMD(%"sysvar('sysicmd') option ") Newappl(SCLP)" ,
         "Passlib"
    exit 0
    end

/* --------------- *
 | Define defaults |
 * --------------- */
 parse value '' with null cns cds
 count   = 0
 changed = 1
 zerrhm   = 'SETCLIPH'
 zerralrm = 'NO'

/* ------------------------- *
 | Define addressing to ISPF |
 | and get the variables     |
 * ------------------------- */
 Address ISPExec
 'vget (cn1 cn2 cn3 cn4 cn5 cn6 cn7 cn8 cn9 cna' ,
       'cd1 cd2 cd3 cd4 cd5 cd6 cd7 cd8 cd9 cda' ,
       'f1 f2 f3 f4 f5 f6 f7 f8 f9 fa' ,
       'l1 l2 l3 l4 l5 l6 l7 l8 l9 la' ,
       ') profile'

/* --------------------------------- *
 | Save in hold as check for changes |
 * --------------------------------- */
 hold = cn1 cn2 cn3 cn4 cn5 cn6 cn7 cn8 cn9 cna  ,
       cd1 cd2 cd3 cd4 cd5 cd6 cd7 cd8 cd9 cda  ,
       f1 f2 f3 f4 f5 f6 f7 f8 f9 fa ,
       l1 l2 l3 l4 l5 l6 l7 l8 l9 la

/* ----------------------------------------------- *
 * If option is not null then just create the user *
 * clipboards and exit                             *
 * ----------------------------------------------- */
 if option /= null then do
    call create_boards
    exit
    end

/* ------------------------------ *
 * Display ISPF Panel and Process *
 * ------------------------------ */
 do forever
    zcmd = null
    count = 0
    "Display Panel(setclipp)"
    if translate(zcmd) = 'CANCEL' then exit
    check  = cn1 cn2 cn3 cn4 cn5 cn6 cn7 cn8 cn9 cna  ,
             cd1 cd2 cd3 cd4 cd5 cd6 cd7 cd8 cd9 cda  ,
             f1 f2 f3 f4 f5 f6 f7 f8 f9 fa ,
             l1 l2 l3 l4 l5 l6 l7 l8 l9 la
   /* ------------------------------------------------------- *
    | If the SET command then call the setzstrt function to   |
    | add TSO %SETCLIP X to the ISPF ZSTART profile variable. |
    * ------------------------------------------------------- */
    if translate(zcmd) = 'SET' then do
       zstart_cmd = 'tso %setclip x'
       xx = setzstrt(zstart_cmd)
       if xx = 0 then do
          zedsmsg = 'Updated'
          zedlmsg = 'The ISPF ZSTART Variable has been' ,
                    'successfully updated so that the' ,
                    'SETCLIP defined clipboards will be' ,
                    'available each time ISPF starts from' ,
                    'now on.'
          end
          else do
               zedsmsg = 'Not Updated'
               zedlmsg = 'The ISPF ZSTART Variable was not' ,
                         'updated. The return code indicates' ,
                         'it is already defined.'
               end
          'Setmsg msg(isrz001)'
          rc = 0
          end
   /* ---------------------------------------------- *
    | If not the SET command then do our processing. |
    * ---------------------------------------------- */
    if translate(zcmd) /= 'SET' then do
       if hold /= check then changed = 1
       if rc > 0 then do
          if changed = 1 then
             call create_boards
          leave
          end
       if z1 = 'D' then parse value '' with cn1 cd1 f1 l1
       if z2 = 'D' then parse value '' with cn2 cd2 f2 l2
       if z3 = 'D' then parse value '' with cn3 cd3 f3 l3
       if z4 = 'D' then parse value '' with cn4 cd4 f4 l4
       if z5 = 'D' then parse value '' with cn5 cd5 f5 l5
       if z6 = 'D' then parse value '' with cn6 cd6 f6 l6
       if z7 = 'D' then parse value '' with cn7 cd7 f7 l7
       if z8 = 'D' then parse value '' with cn8 cd8 f8 l8
       if z9 = 'D' then parse value '' with cn9 cd9 f9 l9
       if za = 'D' then parse value '' with cna cda fa la
       if z1 = 'B' then call browse cd1
       if z2 = 'B' then call browse cd2
       if z3 = 'B' then call browse cd3
       if z4 = 'B' then call browse cd4
       if z5 = 'B' then call browse cd5
       if z6 = 'B' then call browse cd6
       if z7 = 'B' then call browse cd7
       if z8 = 'B' then call browse cd8
       if z9 = 'B' then call browse cd9
       if za = 'B' then call browse cda
       if z1 = 'E' then call edit cd1
       if z2 = 'E' then call edit cd2
       if z3 = 'E' then call edit cd3
       if z4 = 'E' then call edit cd4
       if z5 = 'E' then call edit cd5
       if z6 = 'E' then call edit cd6
       if z7 = 'E' then call edit cd7
       if z8 = 'E' then call edit cd8
       if z9 = 'E' then call edit cd9
       if za = 'E' then call edit cda
       parse value '' with z1 z2 z3 z4 z5 z6 z7 z8 z9 za
       check  = cn1 cn2 cn3 cn4 cn5 cn6 cn7 cn8 cn9 cna  ,
                cd1 cd2 cd3 cd4 cd5 cd6 cd7 cd8 cd9 cda  ,
                f1 f2 f3 f4 f5 f6 f7 f8 f9 fa ,
                l1 l2 l3 l4 l5 l6 l7 l8 l9 la
       if hold /= check then changed = 1
       if changed = 1 then do
          frc = fixup()
          if frc = 0 then do
             call check_boards
             if cboards /= null then do
                zerrsm = 'Error'
                zerrlm = bc 'Rows with errors:' cboards
                'Setmsg msg(isrz002)'
                cboards = null
                end
             else call create_boards
             end
          end
       end
    end

 Exit

/* ---------------------------- *
 | Browse the clipboard dataset |
 * ---------------------------- */
 Browse:
 arg cdsn
 'Browse dataset('cdsn')'
 return

/* -------------------------- *
 | Edit the clipboard dataset |
 * -------------------------- */
 Edit:
 arg cdsn
 'Edit  dataset('cdsn')'
 changed = 1
 return

/* ------------------------------------------ *
 | Check if a clipboard has a missing dataset |
 * ------------------------------------------ */
 Check_Boards:
  cboards = null
  bc      = 0
  if cn1 /= null then if cd1 = null then
     call do_balk cn1
  if wordpos(cn1,'X NX') > 0 then call do_BalkXNX cn1
  if cn2 /= null then if cd2 = null then
     call do_balk cn2
  if wordpos(cn2,'X NX') > 0 then call do_BalkXNX cn2
  if cn3 /= null then if cd3 = null then
     call do_balk cn3
  if wordpos(cn3,'X NX') > 0 then call do_BalkXNX cn3
  if cn4 /= null then if cd4 = null then
     call do_balk cn4
  if wordpos(cn4,'X NX') > 0 then call do_BalkXNX cn4
  if cn5 /= null then if cd5 = null then
     call do_balk cn5
  if wordpos(cn5,'X NX') > 0 then call do_BalkXNX cn5
  if cn6 /= null then if cd1 = null then
     call do_balk cn6
  if wordpos(cn6,'X NX') > 0 then call do_BalkXNX cn6
  if cn7 /= null then if cd7 = null then
     call do_balk cn7
  if wordpos(cn7,'X NX') > 0 then call do_BalkXNX cn7
  if cn8 /= null then if cd8 = null then
     call do_balk cn8
  if wordpos(cn8,'X NX') > 0 then call do_BalkXNX cn8
  if cn9 /= null then if cd1 = null then
     call do_balk cn9
  if wordpos(cn9,'X NX') > 0 then call do_BalkXNX cn9
  if cna /= null then if cda = null then
     call do_balk cna
  if wordpos(cna,'X NX') > 0 then call do_BalkXNX cna

  cns = cn1 cn2 cn3 cn4 cn5 cn6 cn7 cn8 cn9 cna
  do i = 1 to words(cns)
     if word(cns,i+1) = null then leave
     if word(cns,i) = word(cns,i+1) then call do_balkdup word(cns,i)
     end
  return

/* ------------------------------------------- *
 | Check for a clipboard name and if non-blank |
 | then create the clipboard.                  |
 * ------------------------------------------- */
 Create_Boards:
  if cn1 /= null then call create_clipboard cd1 cn1 f1 l1
  if cn2 /= null then call create_clipboard cd2 cn2 f2 l2
  if cn3 /= null then call create_clipboard cd3 cn3 f3 l3
  if cn4 /= null then call create_clipboard cd4 cn4 f4 l4
  if cn5 /= null then call create_clipboard cd5 cn5 f5 l5
  if cn6 /= null then call create_clipboard cd6 cn6 f6 l6
  if cn7 /= null then call create_clipboard cd7 cn7 f7 l7
  if cn8 /= null then call create_clipboard cd8 cn8 f8 l8
  if cn9 /= null then call create_clipboard cd9 cn9 f9 l9
  if cna /= null then call create_clipboard cda cna fa la
  hold = check

  'vput (cn1 cn2 cn3 cn4 cn5 cn6 cn7 cn8 cn9 cna' ,
        'cd1 cd2 cd3 cd4 cd5 cd6 cd7 cd8 cd9 cda' ,
        'f1 f2 f3 f4 f5 f6 f7 f8 f9 fa' ,
        'l1 l2 l3 l4 l5 l6 l7 l8 l9 la' ,
        ') profile'
  if count > 0 then
     if option = null then do
     zerrsm = 'Updated'
     zerrlm = count 'Clipboards updated and saved'
     'Setmsg msg(isrz002)'
     end
  changed = 0
  return

/* ---------------------------------------------------- *
 * Create_Clipboard routine:                            *
 *                                                      *
 * 1. Set the clipboard name and update ispf variable   *
 * 2. View the dataset(member) where the clipboard data *
 *    resides to copy the entire member into clipboard  *
 * ---------------------------------------------------- */
 Create_Clipboard:
  arg clipdsn clipname
  if clipname = '?' then return
  if sysdsn(clipdsn) /= 'OK' then do
     zerrsm = 'Invalid DSN'
     zerrlm = clipdsn sysdsn(clipdsn)
     'Setmsg msg(isrz002)'
     end
  'View dataset('clipdsn') macro(setclipm) parm(clipname)'
  count = count + 1
  return

/* ---------------------------------------------- *
 * Fixup routine:                                 *
 *                                                *
 * Consolidate entries if a delete were performed *
 * ---------------------------------------------- */
 Fixup:
 /* -------------------------- *
  | Test for no clipboard name |
  * -------------------------- */
  if cn1 = null then if cd1 /= null then cn1 = '?'
  if cn2 = null then if cd2 /= null then cn2 = '?'
  if cn3 = null then if cd3 /= null then cn3 = '?'
  if cn4 = null then if cd4 /= null then cn4 = '?'
  if cn5 = null then if cd5 /= null then cn5 = '?'
  if cn6 = null then if cd6 /= null then cn6 = '?'
  if cn7 = null then if cd7 /= null then cn7 = '?'
  if cn8 = null then if cd8 /= null then cn8 = '?'
  if cn9 = null then if cd9 /= null then cn9 = '?'
  if cna = null then if cda /= null then cna = '?'
 /* ------------ *
  | now clean up |
  * ------------ */
  cns = cn1 cn2 cn3 cn4 cn5 ,
        cn6 cn7 cn8 cn9 cna
  cds = cd1 cd2 cd3 cd4 cd5 ,
        cd6 cd7 cd8 cd9 cda
  f1 = strip(f1) ; l1 = strip(l1)
  f2 = strip(f2) ; l2 = strip(l2)
  f3 = strip(f3) ; l3 = strip(l3)
  f4 = strip(f4) ; l4 = strip(l4)
  f5 = strip(f5) ; l5 = strip(l5)
  f6 = strip(f6) ; l6 = strip(l6)
  f7 = strip(f7) ; l7 = strip(l7)
  f8 = strip(f8) ; l8 = strip(l8)
  f9 = strip(f9) ; l9 = strip(l9)
  fa = strip(fa) ; la = strip(la)
  fls = null
  if cn1 /= null then fls = fls 'r'f1'-'l1
  if cn2 /= null then fls = fls 'r'f2'-'l2
  if cn3 /= null then fls = fls 'r'f3'-'l3
  if cn4 /= null then fls = fls 'r'f4'-'l4
  if cn5 /= null then fls = fls 'r'f5'-'l5
  if cn6 /= null then fls = fls 'r'f6'-'l6
  if cn7 /= null then fls = fls 'r'f7'-'l7
  if cn8 /= null then fls = fls 'r'f8'-'l8
  if cn9 /= null then fls = fls 'r'f9'-'l9
  if cna /= null then fls = fls 'r'fa'-'la
  parse value '' with cn1 cn2 cn3 cn4 cn5 cn6 cn7 cn8 cn9 cna ,
                      cd1 cd2 cd3 cd4 cd5 cd6 cd7 cd8 cd9 cda ,
                      f1 f2 f3 f4 f5 f6 f7 f8 f9 fa ,
                      l1 l2 l3 l4 l5 l6 l7 l8 l9 la
  cn1 = word(cns,1)  ; cd1 = word(cds,1)
       rc = test_dsn(cd1); if rc > 0 then return 8
       fr = word(fls,1) ; if fr /= 'r-' then parse value fr with 'r'f1'-'l1 .
  cn2 = word(cns,2)  ; cd2 = word(cds,2)
       rc = test_dsn(cd2); if rc > 0 then return 8
       fr = word(fls,2) ; if fr /= 'r-' then parse value fr with 'r'f2'-'l2 .
  cn3 = word(cns,3)  ; cd3 = word(cds,3)
       rc = test_dsn(cd3); if rc > 0 then return 8
       fr = word(fls,3) ; if fr /= 'r-' then parse value fr with 'r'f3'-'l3 .
  cn4 = word(cns,4)  ; cd4 = word(cds,4)
       rc = test_dsn(cd4); if rc > 0 then return 8
       fr = word(fls,4) ; if fr /= 'r-' then parse value fr with 'r'f4'-'l4 .
  cn5 = word(cns,5)  ; cd5 = word(cds,5)
       rc = test_dsn(cd5); if rc > 0 then return 8
       fr = word(fls,5) ; if fr /= 'r-' then parse value fr with 'r'f5'-'l5 .
  cn6 = word(cns,6)  ; cd6 = word(cds,6)
       rc = test_dsn(cd6); if rc > 0 then return 8
       fr = word(fls,6) ; if fr /= 'r-' then parse value fr with 'r'f6'-'l6 .
  cn7 = word(cns,7)  ; cd7 = word(cds,7)
       rc = test_dsn(cd7); if rc > 0 then return 8
       fr = word(fls,7) ; if fr /= 'r-' then parse value fr with 'r'f7'-'l7 .
  cn8 = word(cns,8)  ; cd8 = word(cds,8)
       rc = test_dsn(cd8); if rc > 0 then return 8
       fr = word(fls,8) ; if fr /= 'r-' then parse value fr with 'r'f8'-'l8 .
  cn9 = word(cns,9)  ; cd9 = word(cds,9)
       rc = test_dsn(cd9); if rc > 0 then return 8
       fr = word(fls,9) ; if fr /= 'r-' then parse value fr with 'r'f9'-'l9 .
  cna = word(cns,10) ; cda = word(cds,10)
       rc = test_dsn(cda); if rc > 0 then return 8
       fr = word(fls,10) ; if fr /= 'r-' then parse value fr with 'r'fa'-'la .
  call do_sort
  return 0

/* -------- *
 * Test DSN *
 * -------- */
 test_dsn:
   arg tdsn
   if tdsn = '' then return 0
   dsnrc = listdsi(tdsn)
   if dsnrc > 0 then do
      zerrsm = 'Invalid DSN'
      zerrlm = 'Dataset:' tdsn 'Error:' sysmsglvl2
      'Setmsg msg(isrz002)'
      return 8
      end
   if wordpos(sysdsorg,'PS PO') = 0 then do
      zerrsm = 'Invalid DSN'
      zerrlm = 'Dataset:' tdsn 'Not a supported DSORG'
      'Setmsg msg(isrz002)'
      return 8
      end
   if sysdsorg = 'PO' then
      if sysdsn(tdsn) /= 'OK' then do
      zerrsm = 'Invalid DSN'
      zerrlm = 'Dataset:' tdsn sysdsn(tdsn)
      'Setmsg msg(isrz002)'
      return 8
      end
   if sysdsorg = 'PO' then
      if pos('(',tdsn) = 0 then do
      zerrsm = 'Invalid DSN'
      zerrlm = 'Dataset:' tdsn 'is a PDS but no member specified.'
      'Setmsg msg(isrz002)'
      return 8
      end
   return 0

/* ----------------------------- *
 | Do_Sort                       |
 | 1. put values into a stem     |
 | 2. sort stem                  |
 | 3. return values to variables |
 * ----------------------------- */
 Do_Sort:
  drop stem.
  stem. = null
  if cn1 /= null then stem.1  = cn1 cd1 'r'f1'-'l1
  if cn2 /= null then stem.2  = cn2 cd2 'r'f2'-'l2
  if cn3 /= null then stem.3  = cn3 cd3 'r'f3'-'l3
  if cn4 /= null then stem.4  = cn4 cd4 'r'f4'-'l4
  if cn5 /= null then stem.5  = cn5 cd5 'r'f5'-'l5
  if cn6 /= null then stem.6  = cn6 cd6 'r'f6'-'l6
  if cn7 /= null then stem.7  = cn7 cd7 'r'f7'-'l7
  if cn8 /= null then stem.8  = cn8 cd8 'r'f8'-'l8
  if cn9 /= null then stem.9  = cn9 cd9 'r'f9'-'l9
  if cna /= null then stem.10 = cna cda 'r'fa'-'la
  stem.0 = 10

/* rexx command to sort a stem variable
   Simple bubble sort of "stem' by stem.1
   Ken Singer, Shell Oil, Houston
 ********************************************************/
  if stem.0 = 1 then return /* simple sort !*/
  ctr =  stem.0
  do y = 1 to  ctr - 1
     do x = y+1 to ctr
        if stem.x = null then leave
        if stem.x < stem.y then do
            /* swap these 2 entries */
            t1 = stem.y ;
            stem.y = stem.x
            stem.x = t1
        end
     end x
  end y
  if stem.1 /= null then
     parse value stem.1 with cn1 cd1 'r'f1'-'l1
  if stem.2 /= null then
     parse value stem.2 with cn2 cd2 'r'f2'-'l2
  if stem.3 /= null then
     parse value stem.3 with cn3 cd3 'r'f3'-'l3
  if stem.4 /= null then
     parse value stem.4 with cn4 cd4 'r'f4'-'l4
  if stem.5 /= null then
     parse value stem.5 with cn5 cd5 'r'f5'-'l5
  if stem.6 /= null then
     parse value stem.6 with cn6 cd6 'r'f6'-'l6
  if stem.7 /= null then
     parse value stem.7 with cn7 cd7 'r'f7'-'l7
  if stem.8 /= null then
     parse value stem.8 with cn8 cd8 'r'f8'-'l8
  if stem.9 /= null then
     parse value stem.9 with cn9 cd9 'r'f9'-'l9
  if stem.10 /= null then
     parse value stem.10 with cna cda 'r'fa'-'la
  drop stem.
  return


 Do_BalkXNX:
  arg tclip
  bc = bc + 1
  cboards = cboards 'Clipboard:' tclip 'not allowed'
  return

 Do_Balk:
  arg tclip
  bc = bc + 1
  cboards = cboards 'Clipboard:' tclip 'no DSN'
  return

 Do_BalkDup:
  arg tclip
  bc = bc + 1
  cboards = cboards 'Clipboard:' tclip 'duplicate'
  return
